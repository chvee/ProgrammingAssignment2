{
    "contents" : "## Put comments here that give an overall description of what your\n## functions do\n\n## Write a short comment describing this function\n\nmakeCacheMatrix <- function(x = matrix()) {\n    cached.inverse <- NULL ##initiate a null variable to store the inverse when needed\n    input.matrix <-x ## Taking the matrix sent and putting into this variable\n    \n    ## Set subfunction replaces the stored matrix. When set is called we are explicitly\n    ## replacing the prior matrix and resetting m to NULL so that cacheSolve will return \n    ## the inverse of the new matrix versus the cached version of the prior one\n    ## We must use the <<- notation as input.matrix and cached.inverse are in the parent\n    ## environment.\n    \n    Set <- function(user.matrix) {\n        input.matrix <<- user.matrix\n        cached.inverse <<- NULL\n    }\n    \n    ## Get subfunction must return the stored matrix. Matrix is stored in input.matrix\n    ## Subfunction runs a quick check to verify that a matrix was previously set\n    \n    Get <- function() {\n        if (is.null(input.matrix)) {\n            message(\"No matrix was available for return\")\n        } else {\n        return(input.matrix)\n        }\n    }\n        \n    ## SetInverse is similar to the Set subfunction, but will be used to specifically \n    ## store the inverse matrix. This subfunction only needs to store it in the cached.inverse\n    ## variable. We must use <<- as cached.inverse is in the parent environement\n   \n    SetInverse <- function(inverse.matrix) {\n        cached.inverse <<- inverse.matrix\n    }\n    \n    ## GetInverse is a simple function to return the inverse matrix. \n    \n    GetInverse <- function() {\n        return(cached.inverse)\n    }\n\n    ## Similar to object oriented programming to classes, this list effectively\n    ## makes the subfunctions defined as public. This way each subfunction can be\n    ## called directly from elsewhere. The \"public\" name of the function can differ\n    ## from the internal name that we gave it. \n    \n    list(set=set, get=get, SetInverse=SetInverse, GetInverse=GetInverse)\n    \n}\n\n\n## Write a short comment describing this function\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n}\n",
    "created" : 1400675489852.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1943440035",
    "id" : "FD7BA16D",
    "lastKnownWriteTime" : 1400698145,
    "path" : "~/GitHub/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}